LoGIcaLly sPeAkINg… (David Chen + Daniel Jung + Faiza Huda)
APCS pd8
HW69: Making Sense
2022-03-02w
time spent: 1 hr

Mean execution times for boards of size n*n:
     n=5   11s        across 2 executions
     n=6   373.79s    across 3 executions
     n=7   868.22s    across 2 executions
     n=8   I refuse to
     
q0: From any starting position, can an open tour always be found? Explain.
  No, due to empirical observations. For example, if we start at position (2,3) on a 5x5 board, then there is no possible solution. 
  Because there’s no possible solution, there’s no open tour.
q1: Same, but for a closed tour.
  No, due to empirical observations. For example, if we start at position (2,3) on a 5x5 board, then there is no possible solution. 
  Because there’s no possible solution, there’s no closed tour. 
q2: How do you explain the increase in execution time as n increases?
  As n increases the number of children or paths that we would have to explore increases in a non-linear fashion. 
q3: Thoughts on optimization?
  We can try a breadth/width-first approach. This way we will be able to “go down” multiple paths at a time optimizing our program.
  
State your cleanest algo for finding your way out of a maze (of the “2D” style discussed in class).
    Base case: If you are at the $ (exit), end the program.
    Choose a cardinal direction and check to see if there are possible valid paths. Return false if there are no possible valid paths to go through 
    (This returns back to the last valid path) and check the other directions as well. If there aren’t any valid paths for any direction, 
    return to the previous working position. 
